<%
function getActionPackage() {
  return `${utils.toKababCase(entity.name)}-actions${utils.getModuleSuffix(config)}`;
}
-%>
<% if (utils.isPresentableEntity(entity) && entity.api.booleans.hasAny) { -%>
// airent imports
import {
  <%_ if (entity.api.booleans.hasSearch) { -%>
  dispatchSearchWith,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  dispatchGetManyWith,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>
  dispatchGetOneWith,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  dispatchGetOneSafeWith,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  dispatchCreateOneWith,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  dispatchUpdateOneWith,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
  dispatchDeleteOneWith,
  <%_ } -%>
} from '<%- config.api.baseLibPackage %>';

// config imports
import { dispatcherConfig } from '<%- config.api.server.dispatcherConfigPackage %>';

// entity imports
import <%= entity.api.strings.actionsClass %> from './<%= getActionPackage() %>';
import {
  <%_ if (entity.api.booleans.hasSearch) { -%>
  <%= entity.api.strings.searchQuery %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
  <%_ } -%>
} from '<%- entity.api.packages.baseRequest %>';
  <%_ if (entity.api.booleans.hasSearch) { -%>

const searchConfig = {
  queryZod: <%= entity.api.strings.searchQuery %>,
  action: <%= entity.api.strings.actionsClass %>.search,
  options: <%= entity.api.methods.search ?? '{}' %>,
};

const search = dispatchSearchWith({
  ...dispatcherConfig,
  ...searchConfig,
});
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>

const getManyConfig = {
  queryZod: <%= entity.api.strings.getManyQuery %>,
  action: <%= entity.api.strings.actionsClass %>.getMany,
  options: <%= entity.api.methods.getMany ?? '{}' %>,
};

const getMany = dispatchGetManyWith({
  ...dispatcherConfig,
  ...getManyConfig,
});
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>

const getOneConfig = {
  paramsZod: <%= entity.api.strings.getOneParams %>,
  action: <%= entity.api.strings.actionsClass %>.getOne,
  options: <%= entity.api.methods.getOne ?? '{}' %>,
};

const getOne = dispatchGetOneWith({
  ...dispatcherConfig,
  ...getOneConfig,
});
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>

const getOneSafeConfig = {
  paramsZod: <%= entity.api.strings.getOneParams %>,
  action: <%= entity.api.strings.actionsClass %>.getOneSafe,
  options: <%= entity.api.methods.getOneSafe ?? '{}' %>,
};

const getOneSafe = dispatchGetOneSafeWith({
  ...dispatcherConfig,
  ...getOneSafeConfig,
});
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

const createOneConfig = {
  bodyZod: <%= entity.api.strings.createOneBody %>,
  action: <%= entity.api.strings.actionsClass %>.createOne,
  options: <%= entity.api.methods.createOne ?? '{}' %>,
};

const createOne = dispatchCreateOneWith({
  ...dispatcherConfig,
  ...createOneConfig,
});
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

const updateOneConfig = {
  paramsZod: <%= entity.api.strings.getOneParams %>,
  bodyZod: <%= entity.api.strings.updateOneBody %>,
  action: <%= entity.api.strings.actionsClass %>.updateOne,
  options: <%= entity.api.methods.updateOne ?? '{}' %>,
};

const updateOne = dispatchUpdateOneWith({
  ...dispatcherConfig,
  ...updateOneConfig,
});
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

const deleteOneConfig = {
  paramsZod: <%= entity.api.strings.getOneParams %>,
  action: <%= entity.api.strings.actionsClass %>.deleteOne,
  options: <%= entity.api.methods.deleteOne ?? '{}' %>,
};

const deleteOne = dispatchDeleteOneWith({
  ...dispatcherConfig,
  ...deleteOneConfig,
});
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= entity.api.strings.dispatcherClass %> = {
  <%_ if (entity.api.booleans.hasSearch) { -%>
  search,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  getMany,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>
  getOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  getOneSafe,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  createOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
  deleteOne,
  <%_ } -%>
};

export default <%= entity.api.strings.dispatcherClass %>;
<% } -%>
